// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: project/v1/project.proto

package projectv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	v1 "projectfrontendservice/gen/project/v1"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ProjectFrontendServiceName is the fully-qualified name of the ProjectFrontendService service.
	ProjectFrontendServiceName = "project.v1.ProjectFrontendService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ProjectFrontendServiceCreateProjectProcedure is the fully-qualified name of the
	// ProjectFrontendService's CreateProject RPC.
	ProjectFrontendServiceCreateProjectProcedure = "/project.v1.ProjectFrontendService/CreateProject"
	// ProjectFrontendServiceReadProjectProcedure is the fully-qualified name of the
	// ProjectFrontendService's ReadProject RPC.
	ProjectFrontendServiceReadProjectProcedure = "/project.v1.ProjectFrontendService/ReadProject"
	// ProjectFrontendServiceReadAllProjectsProcedure is the fully-qualified name of the
	// ProjectFrontendService's ReadAllProjects RPC.
	ProjectFrontendServiceReadAllProjectsProcedure = "/project.v1.ProjectFrontendService/ReadAllProjects"
	// ProjectFrontendServiceUpdateProjectProcedure is the fully-qualified name of the
	// ProjectFrontendService's UpdateProject RPC.
	ProjectFrontendServiceUpdateProjectProcedure = "/project.v1.ProjectFrontendService/UpdateProject"
	// ProjectFrontendServiceDeleteProjectProcedure is the fully-qualified name of the
	// ProjectFrontendService's DeleteProject RPC.
	ProjectFrontendServiceDeleteProjectProcedure = "/project.v1.ProjectFrontendService/DeleteProject"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	projectFrontendServiceServiceDescriptor               = v1.File_project_v1_project_proto.Services().ByName("ProjectFrontendService")
	projectFrontendServiceCreateProjectMethodDescriptor   = projectFrontendServiceServiceDescriptor.Methods().ByName("CreateProject")
	projectFrontendServiceReadProjectMethodDescriptor     = projectFrontendServiceServiceDescriptor.Methods().ByName("ReadProject")
	projectFrontendServiceReadAllProjectsMethodDescriptor = projectFrontendServiceServiceDescriptor.Methods().ByName("ReadAllProjects")
	projectFrontendServiceUpdateProjectMethodDescriptor   = projectFrontendServiceServiceDescriptor.Methods().ByName("UpdateProject")
	projectFrontendServiceDeleteProjectMethodDescriptor   = projectFrontendServiceServiceDescriptor.Methods().ByName("DeleteProject")
)

// ProjectFrontendServiceClient is a client for the project.v1.ProjectFrontendService service.
type ProjectFrontendServiceClient interface {
	CreateProject(context.Context, *connect.Request[v1.CreateProjectRequest]) (*connect.Response[v1.CreateProjectResponse], error)
	ReadProject(context.Context, *connect.Request[v1.ReadProjectRequest]) (*connect.Response[v1.ReadProjectResponse], error)
	ReadAllProjects(context.Context, *connect.Request[v1.ReadAllProjectsRequest]) (*connect.Response[v1.ReadAllProjectsResponse], error)
	UpdateProject(context.Context, *connect.Request[v1.UpdateProjectRequest]) (*connect.Response[v1.UpdateProjectResponse], error)
	DeleteProject(context.Context, *connect.Request[v1.DeleteProjectRequest]) (*connect.Response[v1.DeleteProjectResponse], error)
}

// NewProjectFrontendServiceClient constructs a client for the project.v1.ProjectFrontendService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewProjectFrontendServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ProjectFrontendServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &projectFrontendServiceClient{
		createProject: connect.NewClient[v1.CreateProjectRequest, v1.CreateProjectResponse](
			httpClient,
			baseURL+ProjectFrontendServiceCreateProjectProcedure,
			connect.WithSchema(projectFrontendServiceCreateProjectMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		readProject: connect.NewClient[v1.ReadProjectRequest, v1.ReadProjectResponse](
			httpClient,
			baseURL+ProjectFrontendServiceReadProjectProcedure,
			connect.WithSchema(projectFrontendServiceReadProjectMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		readAllProjects: connect.NewClient[v1.ReadAllProjectsRequest, v1.ReadAllProjectsResponse](
			httpClient,
			baseURL+ProjectFrontendServiceReadAllProjectsProcedure,
			connect.WithSchema(projectFrontendServiceReadAllProjectsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateProject: connect.NewClient[v1.UpdateProjectRequest, v1.UpdateProjectResponse](
			httpClient,
			baseURL+ProjectFrontendServiceUpdateProjectProcedure,
			connect.WithSchema(projectFrontendServiceUpdateProjectMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteProject: connect.NewClient[v1.DeleteProjectRequest, v1.DeleteProjectResponse](
			httpClient,
			baseURL+ProjectFrontendServiceDeleteProjectProcedure,
			connect.WithSchema(projectFrontendServiceDeleteProjectMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// projectFrontendServiceClient implements ProjectFrontendServiceClient.
type projectFrontendServiceClient struct {
	createProject   *connect.Client[v1.CreateProjectRequest, v1.CreateProjectResponse]
	readProject     *connect.Client[v1.ReadProjectRequest, v1.ReadProjectResponse]
	readAllProjects *connect.Client[v1.ReadAllProjectsRequest, v1.ReadAllProjectsResponse]
	updateProject   *connect.Client[v1.UpdateProjectRequest, v1.UpdateProjectResponse]
	deleteProject   *connect.Client[v1.DeleteProjectRequest, v1.DeleteProjectResponse]
}

// CreateProject calls project.v1.ProjectFrontendService.CreateProject.
func (c *projectFrontendServiceClient) CreateProject(ctx context.Context, req *connect.Request[v1.CreateProjectRequest]) (*connect.Response[v1.CreateProjectResponse], error) {
	return c.createProject.CallUnary(ctx, req)
}

// ReadProject calls project.v1.ProjectFrontendService.ReadProject.
func (c *projectFrontendServiceClient) ReadProject(ctx context.Context, req *connect.Request[v1.ReadProjectRequest]) (*connect.Response[v1.ReadProjectResponse], error) {
	return c.readProject.CallUnary(ctx, req)
}

// ReadAllProjects calls project.v1.ProjectFrontendService.ReadAllProjects.
func (c *projectFrontendServiceClient) ReadAllProjects(ctx context.Context, req *connect.Request[v1.ReadAllProjectsRequest]) (*connect.Response[v1.ReadAllProjectsResponse], error) {
	return c.readAllProjects.CallUnary(ctx, req)
}

// UpdateProject calls project.v1.ProjectFrontendService.UpdateProject.
func (c *projectFrontendServiceClient) UpdateProject(ctx context.Context, req *connect.Request[v1.UpdateProjectRequest]) (*connect.Response[v1.UpdateProjectResponse], error) {
	return c.updateProject.CallUnary(ctx, req)
}

// DeleteProject calls project.v1.ProjectFrontendService.DeleteProject.
func (c *projectFrontendServiceClient) DeleteProject(ctx context.Context, req *connect.Request[v1.DeleteProjectRequest]) (*connect.Response[v1.DeleteProjectResponse], error) {
	return c.deleteProject.CallUnary(ctx, req)
}

// ProjectFrontendServiceHandler is an implementation of the project.v1.ProjectFrontendService
// service.
type ProjectFrontendServiceHandler interface {
	CreateProject(context.Context, *connect.Request[v1.CreateProjectRequest]) (*connect.Response[v1.CreateProjectResponse], error)
	ReadProject(context.Context, *connect.Request[v1.ReadProjectRequest]) (*connect.Response[v1.ReadProjectResponse], error)
	ReadAllProjects(context.Context, *connect.Request[v1.ReadAllProjectsRequest]) (*connect.Response[v1.ReadAllProjectsResponse], error)
	UpdateProject(context.Context, *connect.Request[v1.UpdateProjectRequest]) (*connect.Response[v1.UpdateProjectResponse], error)
	DeleteProject(context.Context, *connect.Request[v1.DeleteProjectRequest]) (*connect.Response[v1.DeleteProjectResponse], error)
}

// NewProjectFrontendServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewProjectFrontendServiceHandler(svc ProjectFrontendServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	projectFrontendServiceCreateProjectHandler := connect.NewUnaryHandler(
		ProjectFrontendServiceCreateProjectProcedure,
		svc.CreateProject,
		connect.WithSchema(projectFrontendServiceCreateProjectMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	projectFrontendServiceReadProjectHandler := connect.NewUnaryHandler(
		ProjectFrontendServiceReadProjectProcedure,
		svc.ReadProject,
		connect.WithSchema(projectFrontendServiceReadProjectMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	projectFrontendServiceReadAllProjectsHandler := connect.NewUnaryHandler(
		ProjectFrontendServiceReadAllProjectsProcedure,
		svc.ReadAllProjects,
		connect.WithSchema(projectFrontendServiceReadAllProjectsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	projectFrontendServiceUpdateProjectHandler := connect.NewUnaryHandler(
		ProjectFrontendServiceUpdateProjectProcedure,
		svc.UpdateProject,
		connect.WithSchema(projectFrontendServiceUpdateProjectMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	projectFrontendServiceDeleteProjectHandler := connect.NewUnaryHandler(
		ProjectFrontendServiceDeleteProjectProcedure,
		svc.DeleteProject,
		connect.WithSchema(projectFrontendServiceDeleteProjectMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/project.v1.ProjectFrontendService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ProjectFrontendServiceCreateProjectProcedure:
			projectFrontendServiceCreateProjectHandler.ServeHTTP(w, r)
		case ProjectFrontendServiceReadProjectProcedure:
			projectFrontendServiceReadProjectHandler.ServeHTTP(w, r)
		case ProjectFrontendServiceReadAllProjectsProcedure:
			projectFrontendServiceReadAllProjectsHandler.ServeHTTP(w, r)
		case ProjectFrontendServiceUpdateProjectProcedure:
			projectFrontendServiceUpdateProjectHandler.ServeHTTP(w, r)
		case ProjectFrontendServiceDeleteProjectProcedure:
			projectFrontendServiceDeleteProjectHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedProjectFrontendServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedProjectFrontendServiceHandler struct{}

func (UnimplementedProjectFrontendServiceHandler) CreateProject(context.Context, *connect.Request[v1.CreateProjectRequest]) (*connect.Response[v1.CreateProjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("project.v1.ProjectFrontendService.CreateProject is not implemented"))
}

func (UnimplementedProjectFrontendServiceHandler) ReadProject(context.Context, *connect.Request[v1.ReadProjectRequest]) (*connect.Response[v1.ReadProjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("project.v1.ProjectFrontendService.ReadProject is not implemented"))
}

func (UnimplementedProjectFrontendServiceHandler) ReadAllProjects(context.Context, *connect.Request[v1.ReadAllProjectsRequest]) (*connect.Response[v1.ReadAllProjectsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("project.v1.ProjectFrontendService.ReadAllProjects is not implemented"))
}

func (UnimplementedProjectFrontendServiceHandler) UpdateProject(context.Context, *connect.Request[v1.UpdateProjectRequest]) (*connect.Response[v1.UpdateProjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("project.v1.ProjectFrontendService.UpdateProject is not implemented"))
}

func (UnimplementedProjectFrontendServiceHandler) DeleteProject(context.Context, *connect.Request[v1.DeleteProjectRequest]) (*connect.Response[v1.DeleteProjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("project.v1.ProjectFrontendService.DeleteProject is not implemented"))
}
